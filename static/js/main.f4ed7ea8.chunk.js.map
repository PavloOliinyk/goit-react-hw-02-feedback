{"version":3,"sources":["Section/Section.js","Statistics/Statistics.js","FeedbackOptions/FeedbackOptions.js","Notification/Notification.js","App.js","index.js"],"names":["Section","this","props","title","children","Component","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","map","option","type","value","onClick","onLeaveFeedback","Notification","message","App","state","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","handleClick","setState","prevState","keys","hidden","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAEMA,E,4JACJ,WACE,OACE,oCACE,6BAAKC,KAAKC,MAAMC,QACfF,KAAKC,MAAME,gB,GALEC,aAWPL,ICXTM,E,4JACJ,WACE,OACE,+BACE,wCACQ,+BAAOL,KAAKC,MAAMK,UAE1B,2CACW,+BAAON,KAAKC,MAAMM,aAE7B,uCACO,+BAAOP,KAAKC,MAAMO,SAEzB,yCACS,+BAAOR,KAAKC,MAAMQ,WAE3B,qDACqB,iCAAOT,KAAKC,MAAMS,mBAAlB,iB,GAjBJN,aAwBVC,ICxBTM,E,4JACJ,WAAU,IAAD,OACP,OACE,6BACGX,KAAKC,MAAMW,QAAQC,KAAI,SAAAC,GAAM,OAC5B,6BACE,wBACEC,KAAK,SACLC,MAAOF,EACPG,QAAS,kBAAM,EAAKhB,MAAMiB,gBAAgBJ,IAH5C,SAKGA,KANIA,Y,GALWV,aAoBfO,ICpBTQ,E,4JACJ,WACE,OAAO,4BAAInB,KAAKC,MAAMmB,c,GAFChB,aAMZe,ICFTE,E,4MACJC,MAAQ,CACNhB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPe,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKH,OAAOI,QAAO,SAACV,EAAOW,GAAR,OAAgBA,EAAMX,IAAO,I,EAGvEY,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKR,MAAMhB,KAAO,EAAKiB,qBAAwB,M,EAGpEQ,YAAc,SAAAjB,GACZ,EAAKkB,UAAS,SAAAC,GACZ,OAAO,2BACFA,GADL,kBAEGnB,EAASmB,EAAUnB,GAAU,Q,4CAKpC,WACE,MAA+Bd,KAAKsB,MAA5BhB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBI,EAAUY,OAAOU,KAAKlC,KAAKsB,OAEjC,OACE,qCACE,oBAAIa,QAAM,EAAV,sBACA,cAAC,EAAD,CAASjC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEU,QAASA,EACTM,gBAAiBlB,KAAK+B,gBAG1B,cAAC,EAAD,CAAS7B,MAAM,aAAf,SACGF,KAAKuB,qBAAuB,EAC3B,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOT,KAAKuB,qBACZb,mBAAoBV,KAAK4B,oCAG3B,cAAC,EAAD,CAAcR,QAAQ,+B,GA/ChBhB,aAuDHiB,ICxDfe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f4ed7ea8.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Section extends Component {\n  render() {\n    return (\n      <section>\n        <h2>{this.props.title}</h2>\n        {this.props.children}\n      </section>\n    );\n  }\n}\n\nexport default Section;\n","import React, { Component } from 'react';\n\nclass Statistics extends Component {\n  render() {\n    return (\n      <ul>\n        <li>\n          Good: <span>{this.props.good}</span>\n        </li>\n        <li>\n          Neutral: <span>{this.props.neutral}</span>\n        </li>\n        <li>\n          Bad: <span>{this.props.bad}</span>\n        </li>\n        <li>\n          Total: <span>{this.props.total}</span>\n        </li>\n        <li>\n          Positive feadback: <span>{this.props.positivePercentage}%</span>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default Statistics;\n","import React, { Component } from 'react';\n\nclass FeedbackOptions extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.options.map(option => (\n          <li key={option}>\n            <button\n              type=\"button\"\n              value={option}\n              onClick={() => this.props.onLeaveFeedback(option)}\n            >\n              {option}\n            </button>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default FeedbackOptions;\n","import React, { Component } from 'react';\n\nclass Notification extends Component {\n  render() {\n    return <p>{this.props.message}</p>;\n  }\n}\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport Section from './Section';\nimport Statistics from './Statistics';\nimport FeedbackOptions from './FeedbackOptions';\nimport Notification from './Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((value, acc) => acc + value, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  handleClick = option => {\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        [option]: prevState[option] + 1,\n      };\n    });\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = Object.keys(this.state);\n\n    return (\n      <>\n        <h1 hidden>Comments</h1>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.handleClick}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}